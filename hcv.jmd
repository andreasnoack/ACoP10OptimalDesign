---
title : A PKPD for HVC using Pumas.jl
author : Patrick Kofod Mogensen and Andreas Noack
date :  10/19/2019
---
```julia
using Pumas, LinearAlgebra, Plots, Random
plotly()
Random.seed!(124);
```

A model for hepatitis C virus (HCV) treatment was described in [BJCP]. The model
has a repeated dose og 180 μg per week. Each dose is a 24 hour infusion of pegylated
interferon (PEG-INF) and it's given once per week for four weeks. Samples are
taken at
````julia
t = [0.0, 0.25, 0.5, 1.0, 2.0, 3.0, 4.0, 7.0, 10.0, 14.0, 21.0, 28.0]
```

```julia
# Use the @model macro to use the Pumas DSL for PK/PD models
peg_inf_model = @model begin
    # The "@param" block specifies the parameters
    @param begin
        # fixed effects paramters
        logθKa   ∈  RealDomain()
        logθKe   ∈  RealDomain()
        logθVd   ∈  RealDomain()
        logθn    ∈  RealDomain()
        logθδ    ∈  RealDomain()
        logθc    ∈  RealDomain()
        logθEC50 ∈  RealDomain()
        # random effects variance parameters, must be posisitive
        ω²Ka   ∈ RealDomain(lower=0.0)
        ω²Ke   ∈ RealDomain(lower=0.0)
        ω²Vd   ∈ RealDomain(lower=0.0)
        ω²n    ∈ RealDomain(lower=0.0)
        ω²δ    ∈ RealDomain(lower=0.0)
        ω²c    ∈ RealDomain(lower=0.0)
        ω²EC50 ∈ RealDomain(lower=0.0)
        # variance parameter in proportional error model
        σ²PK ∈ RealDomain(lower=0.0)
        σ²PD ∈ RealDomain(lower=0.0)
    end

    # The random block allows us to specify variances for, and covariances
    # between, the random effects
    @random begin
      ηKa   ~ Normal(0.0, sqrt(ω²Ka))
      ηKe   ~ Normal(0.0, sqrt(ω²Ke))
      ηVd   ~ Normal(0.0, sqrt(ω²Vd))
      ηn    ~ Normal(0.0, sqrt(ω²n))
      ηδ    ~ Normal(0.0, sqrt(ω²δ))
      ηc    ~ Normal(0.0, sqrt(ω²c))
      ηEC50 ~ Normal(0.0, sqrt(ω²EC50))
    end

    @pre begin
        # constants
        p = 100.0
        d = 0.001
        e = 1e-7
        s = 20000.0

        logKa   = logθKa   + ηKa
        logKe   = logθKe   + ηKe
        logVd   = logθVd   + ηVd
        logn    = logθn    + ηn
        logδ    = logθδ    + ηδ
        logc    = logθc    + ηc
        logEC50 = logθEC50 + ηEC50
    end

    @init begin
        T = exp(logc + logδ)/(p*e)
        I = (s*e*p - d*exp(logc + logδ))/(p*exp(logδ)*e)
        W = (s*e*p - d*exp(logc + logδ))/(exp(logc + logδ)*e)
    end

    # The dynamics block is used to describe the evolution of our variables.
    @dynamics begin
        X' = -exp(logKa)*X
        A' = exp(logKa)*X - exp(logKe)*A
        T' = s - T*(e*W + d)
        I' = e*W*T - exp(logδ)*I
        W' = p/((A/exp(logVd)/exp(logEC50))^exp(logn) + 1)*I - exp(logc)*W
    end

    # The derived block is used to model the dependent variables. Both will
    # be available in our simulated data, but only `dv` has a distribution
    # here (~ read "ditributed as").
    @derived begin
        conc   = @. A/exp(logVd)
        log10W = @. log10(W)
        yPK ~ @. Normal(A/exp(logVd), sqrt(σ²PK))
        yPD ~ @. Normal(log10W, sqrt(σ²PD))
    end
end

```

```julia
peg_inf_dr = DosageRegimen(180.0, ii=7.0, addl=3, duration=1.0)
```

```julia
param_PKPD = (
    logθKa   = log(0.80),
    logθKe   = log(0.15),
    logθVd   = log(100.0),
    logθn    = log(2.0),
    logθδ    = log(0.20),
    logθc    = log(7.0),
    logθEC50 = log(0.12),
    # random effects variance parameters, must be posisitive
    ω²Ka   = 0.25,
    ω²Ke   = 0.25,
    ω²Vd   = 0.25,
    ω²n    = 0.25,
    ω²δ    = 0.25,
    ω²c    = 0.25,
    ω²EC50 = 0.25,
    # variance parameter in proportional error model
    σ²PK = 0.04,
    σ²PD = 0.04)
```

```julia
pop = map(i -> Subject(id=i, evs=peg_inf_dr, time=t), 1:30)
```

```julia
data_full_profile = simobs(peg_inf_model, pop[1:5], param_PKPD, obstimes=range(0, stop=4*7, length=1000))
plot(data_full_profile[1].times, [data_full_profile[i].observed.conc for i in 1:5], title="HCV", xlabel="time (in days)", ylabel="PEG-IFN (µg/L)", linewidth=3)

```

```julia
plot(data_full_profile[1].times, [data_full_profile[i].observed.log10W for i in 1:5], title="HCV", xlabel="time (in days)", ylabel="circulating HCV-RNA (log10)", linewidth=3)
```

```julia
data_fim = simobs(peg_inf_model, pop, param_PKPD)
simdf = DataFrame(data_fim)
first(simdf, 5)
```

```julia
pd = read_pumas(simdf, dvs=[:yPK, :yPD])
```

Create small helper function since Pumas current doesn't know the difference between a fixed and a random effects parameter.
```julia
function FOFIM_blockdiag(
    m::Pumas.PumasModel,
    subject::Subject,
    param::NamedTuple,
    args...;
    nfixed=nothing,
    kwargs...
)

    if nfixed === nothing
        throw(ArgumentError("nfixed should be set to the number of fixed effects parameters"))
    end

    nrfx = Pumas.totransform(m.random(param)).dimension
    FIM, Apart, DVpart = Pumas._expected_information_diff(
        m,
        subject,
        param,
        zeros(nrfx),
        Pumas.FO(),
        args...;
        kwargs...)

    Apart[(nfixed + 1):end, (nfixed + 1):end] = DVpart[(nfixed + 1):end, (nfixed + 1):end]
    return Apart
end
```

```julia
fim() = Pumas._expected_information_diff(peg_inf_model, pd[1], param_PKPD, zeros(7), Pumas.FO())
println("Value of log-determinant of block diag FIM: $(logdet(fim()[1]*length(pd)))")
t = minimum(@elapsed fim() for i in 1:5)
println("Computation time for one FIM: $t seconds")
```

